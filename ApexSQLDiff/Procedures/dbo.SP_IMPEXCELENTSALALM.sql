SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[SP_IMPEXCELENTSALALM] @Codigo int, @cl_codigo int   as

SET NOCOUNT ON 
DECLARE @END_indiced INT, @consecutivo INT, @alm_destino int, @alm_origen int
--borra los registros de la tabla que se hayan importado sin numero de parte
/*delete from IMPEXCELALM where NOPARTE=''
-- se actualiza el costo en caso de que venga nulo o igual a cero de productos o subensambles
UPDATE dbo.IMPEXCELALM
SET     dbo.IMPEXCELALM.COSTO= isnull(dbo.VMAESTROCOST.MA_GRAV_MP,0)+ isnull(dbo.VMAESTROCOST.MA_GRAV_ADD,0)+ 
isnull(dbo.VMAESTROCOST.MA_GRAV_EMP,0)+ isnull(dbo.VMAESTROCOST.MA_NG_MP,0) +isnull(dbo.VMAESTROCOST.MA_NG_ADD,0)+ 
isnull(dbo.VMAESTROCOST.MA_NG_EMP,0) + isnull(dbo.VMAESTROCOST.MA_GRAV_GI,0) + isnull(dbo.VMAESTROCOST.MA_GRAV_GI_MX,0) + 
isnull(dbo.VMAESTROCOST.MA_GRAV_MO,0)
FROM         dbo.IMPEXCELALM INNER JOIN
                      dbo.MAESTRO ON dbo.IMPEXCELALM.NOPARTE = dbo.MAESTRO.MA_NOPARTE LEFT OUTER JOIN
                      dbo.VMAESTROCOST ON dbo.MAESTRO.MA_CODIGO = dbo.VMAESTROCOST.MA_CODIGO
WHERE (dbo.IMPEXCELALM.COSTO=0 OR dbo.IMPEXCELALM.COSTO IS NULL) AND dbo.MAESTRO.TI_CODIGO IN
(SELECT TI_CODIGO FROM CONFIGURATIPO WHERE CFT_TIPO='P' OR CFT_TIPO='S')  and dbo.VMAESTROCOST.SPI_CODIGO=22 
-- se actualiza el costo en caso de que venga nulo o igual a cero de materiales
UPDATE dbo.IMPEXCELALM
SET     dbo.IMPEXCELALM.COSTO= isnull(dbo.VMAESTROCOST.MA_COSTO,0)
FROM         dbo.IMPEXCELALM INNER JOIN
                      dbo.MAESTRO ON dbo.IMPEXCELALM.NOPARTE = dbo.MAESTRO.MA_NOPARTE LEFT OUTER JOIN
                      dbo.VMAESTROCOST ON dbo.MAESTRO.MA_CODIGO = dbo.VMAESTROCOST.MA_CODIGO
WHERE (dbo.IMPEXCELALM.COSTO=0 OR dbo.IMPEXCELALM.COSTO IS NULL) AND dbo.MAESTRO.TI_CODIGO IN
(SELECT TI_CODIGO FROM CONFIGURATIPO WHERE CFT_TIPO<>'P' AND CFT_TIPO<>'S')
-- se actualiza el precio de compra en caso de que venga nulo o igual a cero de productos o subensambles
UPDATE dbo.IMPEXCELALM
SET     dbo.IMPEXCELALM.PRECIOC= isnull(dbo.VMAESTROCOST.MA_GRAV_MP,0)+ isnull(dbo.VMAESTROCOST.MA_GRAV_ADD,0)+ 
isnull(dbo.VMAESTROCOST.MA_GRAV_EMP,0)+ isnull(dbo.VMAESTROCOST.MA_NG_MP,0) +isnull(dbo.VMAESTROCOST.MA_NG_ADD,0)+ 
isnull(dbo.VMAESTROCOST.MA_NG_EMP,0)
FROM         dbo.IMPEXCELALM INNER JOIN
                      dbo.MAESTRO ON dbo.IMPEXCELALM.NOPARTE = dbo.MAESTRO.MA_NOPARTE LEFT OUTER JOIN
                      dbo.VMAESTROCOST ON dbo.MAESTRO.MA_CODIGO = dbo.VMAESTROCOST.MA_CODIGO
WHERE (dbo.IMPEXCELALM.PRECIOC=0 OR dbo.IMPEXCELALM.PRECIOC IS NULL) AND dbo.MAESTRO.TI_CODIGO IN
(SELECT TI_CODIGO FROM CONFIGURATIPO WHERE CFT_TIPO='P' OR CFT_TIPO='S')
-- se actualiza el precio de compra en caso de que venga nulo o igual a cero de materiales
UPDATE dbo.IMPEXCELALM
SET     dbo.IMPEXCELALM.PRECIOC= isnull(dbo.VMAESTROCOST.MA_COSTO,0)
FROM         dbo.IMPEXCELALM INNER JOIN
                      dbo.MAESTRO ON dbo.IMPEXCELALM.NOPARTE = dbo.MAESTRO.MA_NOPARTE LEFT OUTER JOIN
                      dbo.VMAESTROCOST ON dbo.MAESTRO.MA_CODIGO = dbo.VMAESTROCOST.MA_CODIGO
WHERE (dbo.IMPEXCELALM.PRECIOC=0 OR dbo.IMPEXCELALM.PRECIOC IS NULL) AND dbo.MAESTRO.TI_CODIGO IN
(SELECT TI_CODIGO FROM CONFIGURATIPO WHERE CFT_TIPO<>'P' AND CFT_TIPO<>'S')
-- se actualiza el precio de venta en caso de que venga nulo o igual a cero
IF (SELECT CF_PRECIOCLIENTE FROM CONFIGURACION)='N' 
BEGIN
	UPDATE dbo.IMPEXCELALM
	SET     dbo.IMPEXCELALM.PRECIOV= ISNULL(dbo.MAESTROCLIENTE.MC_PRECIO, 0)
	FROM         dbo.IMPEXCELALM INNER JOIN
	                      dbo.MAESTRO ON dbo.IMPEXCELALM.NOPARTE = dbo.MAESTRO.MA_NOPARTE LEFT OUTER JOIN
	                      dbo.MAESTROCLIENTE ON dbo.MAESTRO.MA_CODIGO = dbo.MAESTROCLIENTE.MA_CODIGO
	WHERE (dbo.IMPEXCELALM.PRECIOV=0 OR dbo.IMPEXCELALM.PRECIOV IS NULL)
END
ELSE
BEGIN
	UPDATE dbo.IMPEXCELALM
	SET     dbo.IMPEXCELALM.PRECIOV= ISNULL(dbo.MAESTROCLIENTE.MC_PRECIO, 0)
	FROM         dbo.IMPEXCELALM INNER JOIN
	                      dbo.MAESTRO ON dbo.IMPEXCELALM.NOPARTE = dbo.MAESTRO.MA_NOPARTE LEFT OUTER JOIN
	                      dbo.MAESTROCLIENTE ON dbo.MAESTRO.MA_CODIGO = dbo.MAESTROCLIENTE.MA_CODIGO
	WHERE (dbo.IMPEXCELALM.PRECIOV=0 OR dbo.IMPEXCELALM.PRECIOV IS NULL)
	AND dbo.MAESTROCLIENTE.CL_CODIGO = @cl_codigo
END
DELETE FROM IMPORTLOG WHERE IML_CBFORMA=115
if (select count(*) from IMPORTLOG)=0
DBCC CHECKIDENT (IMPORTLOG, RESEED, 0) WITH NO_INFOMSGS
-- revisa si existen en el catalogo maestro
if exists(SELECT dbo.IMPEXCELALM.NOPARTE
	FROM         dbo.MAESTRO RIGHT OUTER JOIN
	                      dbo.IMPEXCELALM ON dbo.MAESTRO.MA_NOPARTE = dbo.IMPEXCELALM.NOPARTE
	WHERE     (dbo.MAESTRO.MA_NOPARTE IS NULL))
	INSERT INTO IMPORTLOG (IML_MENSAJE, IML_CBFORMA) 
	SELECT     'NO SE PUEDE IMPORTAR NO. PARTE : ' +dbo.IMPEXCELALM.NOPARTE +' POR QUE NO EXISTE EN EL CAT. MAESTRO', 115
	FROM         dbo.MAESTRO RIGHT OUTER JOIN
	                      dbo.IMPEXCELALM ON dbo.MAESTRO.MA_NOPARTE = dbo.IMPEXCELALM.NOPARTE
	WHERE     (dbo.MAESTRO.MA_NOPARTE IS NULL) 
	select @consecutivo=cv_codigo from consecutivo
	where cv_tipo = 'END'

	SELECT     @alm_destino=isnull(ALM_DESTINO,0), @alm_origen=isnull(ALM_ORIGEN,0)
	FROM         TMOVIMIENTO 
	WHERE     TM_CODIGO in (select tm_codigo from entsalalm where en_codigo=@Codigo)
-- insercion a la tabla ENTSALALMDET
INSERT INTO ENTSALALMDET (EN_CODIGO, END_INDICED, END_NOPARTE, END_NOMBRE, END_NAME, END_CANT, END_COS_UNI, END_PRECIOVENTA, END_PRECIOCOMPRA, 
                      TI_CODIGO, ME_CODIGO, MA_CODIGO, ME_ALM, EQ_ALM, MA_FAMILIA, END_CAN_ALM, END_COS_TOT)
SELECT     @Codigo, IMPEXCELALM.ORDEN+@consecutivo, IMPEXCELALM.NOPARTE, MAESTRO.MA_NOMBRE, MAESTRO.MA_NAME, IMPEXCELALM.CANTIDAD, IMPEXCELALM.COSTO, 
		isnull(IMPEXCELALM.PRECIOV,0), IMPEXCELALM.PRECIOC, MAESTRO.TI_CODIGO, MAESTRO.ME_COM, MAESTRO.MA_CODIGO, 
                      MAESTRO.ME_ALM, MAESTRO.EQ_ALM, MAESTRO.MA_FAMILIA, isnull(IMPEXCELALM.CANTIDAD,0)* isnull(MAESTRO.EQ_ALM,1),
	isnull(IMPEXCELALM.CANTIDAD,0)* isnull(IMPEXCELALM.COSTO,1)
FROM          MAESTRO RIGHT OUTER JOIN
                      IMPEXCELALM ON MAESTRO.MA_NOPARTE = IMPEXCELALM.NOPARTE
WHERE     (MAESTRO.MA_INV_GEN = 'I')
ORDER BY IMPEXCELALM.ORDEN

select @END_indiced= max(END_indiced) from ENTSALALMDET
	update consecutivo
	set cv_codigo =  isnull(@END_indiced,0) + 1
	where cv_tipo = 'END'
*/
GO
