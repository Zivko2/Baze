SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[SP_DescExplosionBomAlm] (@EN_CODIGO Int)   as

SET NOCOUNT ON 

declare @END_INDICED INT, @BST_PT INT, @END_CANT decimal(38,6), @END_FECHA_STRUCT DATETIME, @countbom int, 
@ALM_ORIGEN int, @ALM_DESTINO int, @CFM_TIPO varchar(2), @CF_DESCMOVALM char(1), @CF_CTRLLOCPRODUC CHAR(1)


SELECT @CF_DESCMOVALM= CF_DESCMOVALM FROM CONFIGURACION

SELECT     @CFM_TIPO= dbo.CONFIGURATMOVIMIENTO.CFM_TIPO
FROM         dbo.ENTSALALM LEFT OUTER JOIN
                      dbo.CONFIGURATMOVIMIENTO ON dbo.ENTSALALM.TM_CODIGO = dbo.CONFIGURATMOVIMIENTO.TM_CODIGO
WHERE dbo.ENTSALALM.EN_CODIGO=@EN_CODIGO

/* @CF_CTRLLOCPRODUC controla localidades en produccion, esto que significa al salir de produccion se debera descargar por no. de parte, no pt, esto es porque 
 cada movimiento entre localidades de produccion se fueron descargando cada uno de los numeros de parte (explosionando el pt)
*/
SELECT     @CF_CTRLLOCPRODUC = CF_CTRLLOCPRODUC
FROM         dbo.CONFIGURACION


if (@CFM_TIPO IN ('DV', 'AJ', 'EN', 'IV', 'PR', 'LC', 'DB')  
	 or (@CFM_TIPO='PD' and @CF_CTRLLOCPRODUC='N')) and @CF_DESCMOVALM='P' -- salida por no. de parte, no pt (es explosiionado)
begin
	/* se corren los stored para cada uno de los pt o sub del detalle de la factura*/
	declare CUR_DETALLEALMPT cursor for
	-- selecciona Producto Terminados o Subensambles para esa Factura
		SELECT     dbo.ENTSALALMDET.END_INDICED, dbo.ENTSALALMDET.MA_CODIGO, dbo.ENTSALALMDET.END_CAN_ALM AS END_CANT, 
		                      dbo.ENTSALALMDET.END_FECHA_STRUCT, dbo.ENTSALALM.ALM_ORIGEN, dbo.ENTSALALM.ALM_DESTINO
		FROM         dbo.ENTSALALMDET INNER JOIN
		                      dbo.ENTSALALM ON dbo.ENTSALALMDET.EN_CODIGO = dbo.ENTSALALM.EN_CODIGO LEFT OUTER JOIN
		                      dbo.CONFIGURATIPO ON dbo.ENTSALALMDET.TI_CODIGO = dbo.CONFIGURATIPO.TI_CODIGO
		WHERE     (dbo.CONFIGURATIPO.CFT_TIPO = 'S' OR
		                      dbo.CONFIGURATIPO.CFT_TIPO = 'P') AND (dbo.ENTSALALMDET.EN_CODIGO = @EN_CODIGO) AND (dbo.ENTSALALMDET.END_TIPODESCARGA = 'N') 
				AND (dbo.ENTSALALMDET.END_CANT > 0) AND (dbo.ENTSALALMDET.END_TIPODESCARGA ='N')
		ORDER BY dbo.ENTSALALMDET.MA_CODIGO
	
	
	 OPEN CUR_DETALLEALMPT
	
	  FETCH NEXT FROM CUR_DETALLEALMPT  INTO @END_INDICED, @BST_PT, @END_CANT, @END_FECHA_STRUCT, @ALM_ORIGEN, @ALM_DESTINO
	
	  WHILE (@@FEtch_status = 0) 
	  BEGIN  
	
		select @countbom = count(*) from bom_struct where  bsu_subensamble=@BST_PT and bst_perini<=@END_FECHA_STRUCT and bst_perfin>=@END_FECHA_STRUCT
	
		if exists(select * from TempBOM_DESCALM where END_INDICED=@END_INDICED)
		delete from TempBOM_DESCALM where END_INDICED=@END_INDICED
	
		if @countbom >0
		-- LE FALTAN PARAMETROS
		EXEC SP_FILL_TempBOM_DESCALM @END_INDICED, @BST_PT, @END_FECHA_STRUCT, @END_CANT, @EN_CODIGO, @ALM_ORIGEN, @ALM_DESTINO
	
		FETCH NEXT FROM CUR_DETALLEALMPT INTO @END_INDICED, @BST_PT, @END_CANT, @END_FECHA_STRUCT, @ALM_ORIGEN, @ALM_DESTINO
	
	END
	
		CLOSE CUR_DETALLEALMPT
		DEALLOCATE CUR_DETALLEALMPT


		-- descarga por listado (estructura dinamica)
		insert into TempBOM_DESCALM(END_INDICED, BST_HIJO, BST_INCORPOR, BST_DISCH, TI_CODIGO, ME_CODIGO, FACTCONVALM, ME_ALM, 
		    BST_TRANS, MA_TIP_ENS, END_CANT, EN_CODIGO,  ALM_ORIGEN, ALM_DESTINO, BST_PT, BST_TIPODESC)

		SELECT     dbo.ENTSALALMLISTA.END_INDICED, dbo.MAESTRO.MA_CODIGO, 1, 'S', dbo.MAESTRO.TI_CODIGO, dbo.ENTSALALMLISTA.ME_CODIGO, 
		                      dbo.ENTSALALMLISTA.FACTCONV, dbo.ENTSALALMLISTA.ME_ALM, 'N', dbo.MAESTRO.MA_TIP_ENS, 
		                      dbo.ENTSALALMLISTA.ENT_INCORPOR * dbo.ENTSALALMLISTA.FACTCONV, dbo.ENTSALALMDET.EN_CODIGO, dbo.ENTSALALM.ALM_ORIGEN, 
		                      dbo.ENTSALALM.ALM_DESTINO, 0, 
				'BST_TIPODESC'=CASE WHEN dbo.ENTSALALMDET.END_TIPOENTSAL='R' THEN 'D' ELSE 'N' END
		FROM         dbo.ENTSALALMLISTA LEFT OUTER JOIN
		                      dbo.CONFIGURATIPO ON dbo.ENTSALALMLISTA.TI_HIJO = dbo.CONFIGURATIPO.TI_CODIGO LEFT OUTER JOIN
		                      dbo.MAESTRO ON dbo.ENTSALALMLISTA.MA_HIJO = dbo.MAESTRO.MA_CODIGO RIGHT OUTER JOIN
		                      dbo.ENTSALALMDET ON dbo.ENTSALALMLISTA.END_INDICED = dbo.ENTSALALMDET.END_INDICED RIGHT OUTER JOIN
		                      dbo.ENTSALALM LEFT OUTER JOIN
		                      dbo.TMOVIMIENTO ON dbo.ENTSALALM.TM_CODIGO = dbo.TMOVIMIENTO.TM_CODIGO ON 
		                      dbo.ENTSALALMDET.EN_CODIGO = dbo.ENTSALALM.EN_CODIGO
		WHERE     (dbo.CONFIGURATIPO.CFT_TIPO = 'S' OR
	                      dbo.CONFIGURATIPO.CFT_TIPO = 'P') AND (dbo.ENTSALALMDET.EN_CODIGO = @EN_CODIGO) AND (dbo.ENTSALALMDET.END_TIPODESCARGA = 'N') 
			AND (dbo.ENTSALALMDET.END_CANT > 0) AND (dbo.ENTSALALMDET.END_TIPODESCARGA <>'N')
		GROUP BY dbo.MAESTRO.MA_CODIGO, dbo.MAESTRO.MA_NOPARTE, dbo.ENTSALALMLISTA.ME_CODIGO, 
		                      dbo.ENTSALALMLISTA.ME_ALM, dbo.ENTSALALMLISTA.FACTCONV, dbo.MAESTRO.TI_CODIGO, dbo.ENTSALALMDET.END_TIPODESCARGA, 
		                      dbo.ENTSALALM.ALM_ORIGEN, dbo.ENTSALALM.ALM_DESTINO, dbo.ENTSALALM.EN_CODIGO, dbo.ENTSALALMLISTA.END_INDICED, 
		                      dbo.ENTSALALMLISTA.ENT_INCORPOR * dbo.ENTSALALMLISTA.FACTCONV, dbo.MAESTRO.MA_TIP_ENS, dbo.MAESTRO.MA_DISCHARGE, 
		                      dbo.ENTSALALMDET.EN_CODIGO, dbo.ENTSALALMDET.END_TIPOENTSAL
		HAVING      (dbo.MAESTRO.MA_CODIGO IS NOT NULL) AND (SUM(dbo.ENTSALALMLISTA.ENT_INCORPOR * dbo.ENTSALALMLISTA.FACTCONV) > 0)

end



/* materia prima */
	insert into TempBOM_DESCALM(END_INDICED, BST_HIJO, BST_INCORPOR, BST_DISCH, TI_CODIGO, ME_CODIGO, FACTCONVALM, ME_ALM, 
	    BST_TRANS, MA_TIP_ENS, END_CANT, EN_CODIGO, ALM_ORIGEN, ALM_DESTINO, BST_TIPODESC, BST_PT)

	SELECT     dbo.ENTSALALMDET.END_INDICED, dbo.ENTSALALMDET.MA_CODIGO, 1, 
			'S', dbo.ENTSALALMDET.TI_CODIGO, dbo.ENTSALALMDET.ME_CODIGO, 
	                      dbo.ENTSALALMDET.EQ_ALM, dbo.ENTSALALMDET.ME_ALM, 'N', dbo.MAESTRO.MA_TIP_ENS, 
			dbo.ENTSALALMDET.END_CAN_ALM,	dbo.ENTSALALMDET.EN_CODIGO, 
	                      dbo.ENTSALALM.ALM_ORIGEN, dbo.ENTSALALM.ALM_DESTINO, 'BST_TIPODESC'=CASE
			WHEN dbo.ENTSALALMDET.END_TIPOENTSAL='R' THEN 'D' ELSE 'N' END, 0
	FROM         dbo.MAESTRO RIGHT OUTER JOIN
	                      dbo.ENTSALALMDET ON dbo.MAESTRO.MA_CODIGO = dbo.ENTSALALMDET.MA_CODIGO RIGHT OUTER JOIN
	                      dbo.ENTSALALM LEFT OUTER JOIN
	                      dbo.TMOVIMIENTO ON dbo.ENTSALALM.TM_CODIGO = dbo.TMOVIMIENTO.TM_CODIGO ON 
	                      dbo.ENTSALALMDET.EN_CODIGO = dbo.ENTSALALM.EN_CODIGO
	WHERE     (dbo.ENTSALALMDET.TI_CODIGO IN
	                          (SELECT     TI_CODIGO
	                            FROM          CONFIGURATIPO
	                            WHERE      CFT_TIPO <> 'P' AND CFT_TIPO <> 'S')) AND (dbo.ENTSALALMDET.EN_CODIGO = @EN_CODIGO)
	GROUP BY dbo.ENTSALALMDET.MA_CODIGO, dbo.ENTSALALMDET.END_NOPARTE, 
	                      dbo.ENTSALALMDET.ME_CODIGO, dbo.ENTSALALMDET.ME_ALM, dbo.ENTSALALMDET.EQ_ALM, 
	                      dbo.ENTSALALMDET.TI_CODIGO, dbo.ENTSALALMDET.END_TIPODESCARGA, dbo.ENTSALALM.ALM_ORIGEN, 
	                      dbo.ENTSALALM.ALM_DESTINO, dbo.ENTSALALM.EN_CODIGO, dbo.ENTSALALMDET.END_INDICED, dbo.ENTSALALMDET.END_CAN_ALM, 
	                      dbo.MAESTRO.MA_TIP_ENS, dbo.MAESTRO.MA_DISCHARGE, dbo.ENTSALALMDET.EN_CODIGO, dbo.ENTSALALMDET.END_TIPOENTSAL		
	HAVING      (dbo.ENTSALALMDET.MA_CODIGO IS NOT NULL) AND (SUM(dbo.ENTSALALMDET.END_CAN_ALM) > 0)


	if @CFM_TIPO ='TR' or  @CFM_TIPO ='SA'-- transferencia entre almacenes o salida de la planta (ya se explosiono al salir de produccion)
	begin
		insert into TempBOM_DESCALM(END_INDICED, BST_HIJO, BST_INCORPOR, BST_DISCH, TI_CODIGO, ME_CODIGO, FACTCONVALM, ME_ALM, 
		    BST_TRANS, MA_TIP_ENS, END_CANT, EN_CODIGO,  ALM_ORIGEN, ALM_DESTINO, BST_TIPODESC, BST_PT)
	
		SELECT     dbo.ENTSALALMDET.END_INDICED, dbo.ENTSALALMDET.MA_CODIGO, 1, 
				'S', dbo.ENTSALALMDET.TI_CODIGO, dbo.ENTSALALMDET.ME_CODIGO, 
		                      dbo.ENTSALALMDET.EQ_ALM, dbo.ENTSALALMDET.ME_ALM, 'N', dbo.MAESTRO.MA_TIP_ENS, 
				dbo.ENTSALALMDET.END_CAN_ALM,	dbo.ENTSALALMDET.EN_CODIGO, 
		                      dbo.ENTSALALM.ALM_ORIGEN, dbo.ENTSALALM.ALM_DESTINO, 'BST_TIPODESC'=CASE
			WHEN dbo.ENTSALALMDET.END_TIPOENTSAL='R' THEN 'D' ELSE 'N' END, 0
		FROM         dbo.MAESTRO RIGHT OUTER JOIN
		                      dbo.ENTSALALMDET ON dbo.MAESTRO.MA_CODIGO = dbo.ENTSALALMDET.MA_CODIGO RIGHT OUTER JOIN
		                      dbo.ENTSALALM LEFT OUTER JOIN
		                      dbo.TMOVIMIENTO ON dbo.ENTSALALM.TM_CODIGO = dbo.TMOVIMIENTO.TM_CODIGO ON 
		                      dbo.ENTSALALMDET.EN_CODIGO = dbo.ENTSALALM.EN_CODIGO
		WHERE     (dbo.ENTSALALMDET.EN_CODIGO = @EN_CODIGO)
		GROUP BY dbo.ENTSALALMDET.MA_CODIGO, dbo.ENTSALALMDET.END_NOPARTE, 
		                      dbo.ENTSALALMDET.ME_CODIGO, dbo.ENTSALALMDET.ME_ALM, dbo.ENTSALALMDET.EQ_ALM, 
		                      dbo.ENTSALALMDET.TI_CODIGO, dbo.ENTSALALMDET.END_TIPODESCARGA, dbo.ENTSALALM.ALM_ORIGEN, 
		                      dbo.ENTSALALM.ALM_DESTINO, dbo.ENTSALALM.EN_CODIGO, dbo.ENTSALALMDET.END_INDICED, dbo.ENTSALALMDET.END_CAN_ALM, 
		                      dbo.MAESTRO.MA_TIP_ENS, dbo.MAESTRO.MA_DISCHARGE, dbo.ENTSALALMDET.EN_CODIGO, dbo.ENTSALALMDET.END_TIPOENTSAL
		HAVING      (dbo.ENTSALALMDET.MA_CODIGO IS NOT NULL) AND (SUM(dbo.ENTSALALMDET.END_CAN_ALM) > 0)
	end



	if  (@CFM_TIPO='PD' and @CF_CTRLLOCPRODUC='S') -- en la salida de produccion y lleva control de localidades en produccion 
	begin

		-- la ultima localidad de produccion es solo de revision  (se debe de descargar como si fuera mp)

		insert into TempBOM_DESCALM(END_INDICED, BST_HIJO, BST_INCORPOR, BST_DISCH, TI_CODIGO, ME_CODIGO, FACTCONVALM, ME_ALM, 
		    BST_TRANS, MA_TIP_ENS, END_CANT, EN_CODIGO,  ALM_ORIGEN, ALM_DESTINO, BST_TIPODESC, BST_PT)
	
		SELECT     dbo.ENTSALALMDET.END_INDICED, dbo.ENTSALALMDET.MA_CODIGO, 1, 
				'S', dbo.ENTSALALMDET.TI_CODIGO, dbo.ENTSALALMDET.ME_CODIGO, 
		                      dbo.ENTSALALMDET.EQ_ALM, dbo.ENTSALALMDET.ME_ALM, 'N', dbo.MAESTRO.MA_TIP_ENS, 
				dbo.ENTSALALMDET.END_CAN_ALM,	dbo.ENTSALALMDET.EN_CODIGO, 
		                      dbo.ENTSALALM.ALM_ORIGEN, dbo.ENTSALALM.ALM_DESTINO, 'BST_TIPODESC'=CASE
			WHEN dbo.ENTSALALMDET.END_TIPOENTSAL='R' THEN 'D' ELSE 'N' END, 0
		FROM         dbo.MAESTRO RIGHT OUTER JOIN
		                      dbo.ENTSALALMDET ON dbo.MAESTRO.MA_CODIGO = dbo.ENTSALALMDET.MA_CODIGO RIGHT OUTER JOIN
		                      dbo.ENTSALALM LEFT OUTER JOIN
		                      dbo.TMOVIMIENTO ON dbo.ENTSALALM.TM_CODIGO = dbo.TMOVIMIENTO.TM_CODIGO ON 
		                      dbo.ENTSALALMDET.EN_CODIGO = dbo.ENTSALALM.EN_CODIGO
		WHERE     (dbo.ENTSALALMDET.EN_CODIGO = @EN_CODIGO)
			AND dbo.ENTSALALM.ALM_ORIGEN IN (SELECT ALM_CODIGO FROM ALMACEN WHERE ALM_SOLOREVISION='S')
		GROUP BY dbo.ENTSALALMDET.MA_CODIGO, dbo.ENTSALALMDET.END_NOPARTE, 
		                      dbo.ENTSALALMDET.ME_CODIGO, dbo.ENTSALALMDET.ME_ALM, dbo.ENTSALALMDET.EQ_ALM, 
		                      dbo.ENTSALALMDET.TI_CODIGO, dbo.ENTSALALMDET.END_TIPODESCARGA, dbo.ENTSALALM.ALM_ORIGEN, 
		                      dbo.ENTSALALM.ALM_DESTINO, dbo.ENTSALALM.EN_CODIGO, dbo.ENTSALALMDET.END_INDICED, dbo.ENTSALALMDET.END_CAN_ALM, 
		                      dbo.MAESTRO.MA_TIP_ENS, dbo.MAESTRO.MA_DISCHARGE, dbo.ENTSALALMDET.EN_CODIGO, dbo.ENTSALALMDET.END_TIPOENTSAL
		HAVING      (dbo.ENTSALALMDET.MA_CODIGO IS NOT NULL) AND (SUM(dbo.ENTSALALMDET.END_CAN_ALM) > 0)


		-- la ultima localidad de produccion se le agregan componentes (se debe de descargar en base a su estructura)
		declare CUR_DETALLELOC cursor for
			SELECT     dbo.ENTSALALMDET.END_INDICED, dbo.ENTSALALMDET.MA_CODIGO, dbo.ENTSALALMDET.END_CAN_ALM AS END_CANT, 
			                      dbo.ENTSALALMDET.END_FECHA_STRUCT, dbo.ENTSALALM.ALM_ORIGEN, dbo.ENTSALALM.ALM_DESTINO
			FROM         dbo.ENTSALALMDET INNER JOIN
			                      dbo.ENTSALALM ON dbo.ENTSALALMDET.EN_CODIGO = dbo.ENTSALALM.EN_CODIGO LEFT OUTER JOIN
			                      dbo.CONFIGURATIPO ON dbo.ENTSALALMDET.TI_CODIGO = dbo.CONFIGURATIPO.TI_CODIGO
			WHERE     (dbo.CONFIGURATIPO.CFT_TIPO = 'S' OR dbo.CONFIGURATIPO.CFT_TIPO = 'P') AND (dbo.ENTSALALMDET.EN_CODIGO = @EN_CODIGO) 
					AND (dbo.ENTSALALMDET.END_TIPODESCARGA = 'N') 
					AND (dbo.ENTSALALMDET.END_CANT > 0) 
				AND dbo.ENTSALALM.ALM_ORIGEN IN (SELECT ALM_CODIGO FROM ALMACEN WHERE ALM_SOLOREVISION<>'S')
				AND (dbo.ENTSALALMDET.END_TIPODESCARGA ='N')
			ORDER BY dbo.ENTSALALMDET.MA_CODIGO
		
		
		 OPEN CUR_DETALLELOC
		
		  FETCH NEXT FROM CUR_DETALLELOC  INTO @END_INDICED, @BST_PT, @END_CANT, @END_FECHA_STRUCT, @ALM_ORIGEN, @ALM_DESTINO
		
		  WHILE (@@FEtch_status = 0) 
		  BEGIN  
		
			select @countbom = count(*) from bom_struct where  bsu_subensamble=@BST_PT and bst_perini<=@END_FECHA_STRUCT and bst_perfin>=@END_FECHA_STRUCT
		
			if exists(select * from TempBOM_DESCALM where END_INDICED=@END_INDICED)
			delete from TempBOM_DESCALM where END_INDICED=@END_INDICED
		
			if @countbom >0
			-- LE FALTAN PARAMETROS
			EXEC SP_FILL_TempBOM_DESCALM @END_INDICED, @BST_PT, @END_FECHA_STRUCT, @END_CANT, @EN_CODIGO, @ALM_ORIGEN, @ALM_DESTINO
		
			FETCH NEXT FROM CUR_DETALLELOC INTO @END_INDICED, @BST_PT, @END_CANT, @END_FECHA_STRUCT, @ALM_ORIGEN, @ALM_DESTINO
		
		END
		
			CLOSE CUR_DETALLELOC
			DEALLOCATE CUR_DETALLELOC


		-- descarga por listado (estructura dinamica)
		insert into TempBOM_DESCALM(END_INDICED, BST_HIJO, BST_INCORPOR, BST_DISCH, TI_CODIGO, ME_CODIGO, FACTCONVALM, ME_ALM, 
		    BST_TRANS, MA_TIP_ENS, END_CANT, EN_CODIGO,  ALM_ORIGEN, ALM_DESTINO, BST_PT, BST_TIPODESC)


		SELECT     dbo.ENTSALALMLISTA.END_INDICED, dbo.MAESTRO.MA_CODIGO, 1, 'S', dbo.MAESTRO.TI_CODIGO, dbo.ENTSALALMLISTA.ME_CODIGO, 
		                      dbo.ENTSALALMLISTA.FACTCONV, dbo.ENTSALALMLISTA.ME_ALM, 'N', dbo.MAESTRO.MA_TIP_ENS, 
		                      dbo.ENTSALALMLISTA.ENT_INCORPOR * dbo.ENTSALALMLISTA.FACTCONV, dbo.ENTSALALMDET.EN_CODIGO, dbo.ENTSALALM.ALM_ORIGEN, 
		                      dbo.ENTSALALM.ALM_DESTINO, 0, 
				'BST_TIPODESC'=CASE WHEN dbo.ENTSALALMDET.END_TIPOENTSAL='R' THEN 'D' ELSE 'N' END
		FROM         dbo.ENTSALALMLISTA LEFT OUTER JOIN
		                      dbo.CONFIGURATIPO ON dbo.ENTSALALMLISTA.TI_HIJO = dbo.CONFIGURATIPO.TI_CODIGO LEFT OUTER JOIN
		                      dbo.MAESTRO ON dbo.ENTSALALMLISTA.MA_HIJO = dbo.MAESTRO.MA_CODIGO RIGHT OUTER JOIN
		                      dbo.ENTSALALMDET ON dbo.ENTSALALMLISTA.END_INDICED = dbo.ENTSALALMDET.END_INDICED RIGHT OUTER JOIN
		                      dbo.ENTSALALM LEFT OUTER JOIN
		                      dbo.TMOVIMIENTO ON dbo.ENTSALALM.TM_CODIGO = dbo.TMOVIMIENTO.TM_CODIGO ON 
		                      dbo.ENTSALALMDET.EN_CODIGO = dbo.ENTSALALM.EN_CODIGO
		WHERE     (dbo.CONFIGURATIPO.CFT_TIPO = 'S' OR
		                      dbo.CONFIGURATIPO.CFT_TIPO = 'P') AND (dbo.ENTSALALMDET.EN_CODIGO = @EN_CODIGO) 
					AND (dbo.ENTSALALMDET.END_TIPODESCARGA = 'N') AND 
		                      (dbo.ENTSALALMDET.END_CANT > 0) AND (dbo.ENTSALALM.ALM_ORIGEN IN
		                          (SELECT     ALM_CODIGO
		                            FROM          ALMACEN
		                            WHERE      ALM_SOLOREVISION <> 'S')) AND (dbo.ENTSALALMDET.END_TIPODESCARGA <> 'N')
		GROUP BY dbo.MAESTRO.MA_CODIGO, dbo.MAESTRO.MA_NOPARTE, dbo.ENTSALALMLISTA.ME_CODIGO, 
		                      dbo.ENTSALALMLISTA.ME_ALM, dbo.ENTSALALMLISTA.FACTCONV, dbo.MAESTRO.TI_CODIGO, dbo.ENTSALALMDET.END_TIPODESCARGA, 
		                      dbo.ENTSALALM.ALM_ORIGEN, dbo.ENTSALALM.ALM_DESTINO, dbo.ENTSALALM.EN_CODIGO, dbo.ENTSALALMLISTA.END_INDICED, 
		                      dbo.ENTSALALMLISTA.ENT_INCORPOR * dbo.ENTSALALMLISTA.FACTCONV, dbo.MAESTRO.MA_TIP_ENS, dbo.MAESTRO.MA_DISCHARGE, 
		                      dbo.ENTSALALMDET.EN_CODIGO, dbo.ENTSALALMDET.END_TIPOENTSAL
		HAVING      (dbo.MAESTRO.MA_CODIGO IS NOT NULL) AND (SUM(dbo.ENTSALALMLISTA.ENT_INCORPOR * dbo.ENTSALALMLISTA.FACTCONV) > 0)
	end





















GO
